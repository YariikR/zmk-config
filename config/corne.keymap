/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Caps_Word {
            bindings = <&caps_word>;
            key-positions = <24 35>;
        };

        Numbed {
            bindings = <&tog 5>;
            key-positions = <14 15>;
        };

        Caps_Lock {
            bindings = <&kp CLCK>;
            key-positions = <12 23>;
        };

        BT1 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <4 5>;
        };

        BT2 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <16 17>;
        };

        BT3 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <28 29>;
        };
    };

    behaviors {
    };

    macros {
        test_macro: test_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(I) &kp T &kp SQT &kp S &kp SPACE &kp J &kp U &kp S &kp T &kp SPACE &kp A &kp SPACE &kp T &kp E &kp S &kp T &kp SPACE &kp M &kp A &kp C &kp R &kp O &kp EXCL>;
            label = "TEST_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt LA(LC(RIGHT_GUI)) TAB        &kp Q  &kp W  &kp E                   &kp R               &kp T          &kp Y            &kp U                    &kp I          &kp O    &kp P                   &lt 3 LEFT_BRACKET
&mt LA(LC(LG(RIGHT_SHIFT))) ESC  &kp A  &kp S  &kp D                   &kp F               &kp G          &kp H            &kp J                    &kp K          &kp L    &mt RIGHT_CONTROL SEMI  &kp SQT
&kp LEFT_SHIFT                   &kp Z  &kp X  &kp C                   &kp V               &kp B          &kp N            &kp M                    &kp COMMA      &kp DOT  &kp FSLH                &kp RIGHT_SHIFT
                                               &mt LEFT_ALT BACKSPACE  &mt LEFT_GUI ENTER  &lt 1 SPACE    &lt 2 BACKSPACE  &mt RIGHT_COMMAND ENTER  &kp RIGHT_ALT
            >;
        };

        Numb_Arr {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LG(GRAVE)    &kp N1                                &kp N2          &kp N3        &kp N4          &kp N5       &kp N6         &kp N7    &kp N8  &kp N9     &kp N0         &trans
&kp LS(LC(TAB))  &kp LC(TAB)                           &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT    &kp LEFT       &kp DOWN  &kp UP  &kp RIGHT  &kp RA(RG(C))  &kp RA(RG(X))
&trans           &kp C_AC_NEXT_KEYBOARD_LAYOUT_SELECT  &kp HOME        &kp PAGE_UP   &kp PAGE_DOWN   &kp END      &trans         &trans    &trans  &trans     &trans         &trans
                                                                       &trans        &trans          &trans       &kp BACKSPACE  &trans    &trans
            >;
        };

        Symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &trans
&kp TILDE  &kp LBKT  &kp RBKT  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &trans           &kp LBRC  &kp RBRC  &trans
&trans     &trans    &trans    &trans    &trans    &trans       &kp UNDER  &kp PLUS   &trans           &trans    &kp BSLH  &kp PIPE
                               &trans    &trans    &trans       &trans     &trans     &trans
            >;
        };

        BT {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        System {
            bindings = <
&trans  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11    &trans          &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans      &trans  &kp C_POWER
&trans  &kp F4  &kp F5  &kp F6  &kp F12  &trans     &kp C_PREVIOUS  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp C_NEXT  &trans  &trans
&trans  &kp F1  &kp F2  &kp F3  &trans   &trans     &trans          &kp K_MUTE            &kp C_PP              &trans      &trans  &test_macro
                        &trans  &trans   &trans     &trans          &trans                &trans
            >;
        };

        Numpad {
            bindings = <
&kp COMMA     &kp N7  &kp N8  &kp N9  &kp EQUAL  &trans             &trans  &trans  &trans  &trans  &trans  &trans
&kp PERIOD    &kp N4  &kp N5  &kp N6  &kp PLUS   &kp KP_MULTIPLY    &trans  &trans  &trans  &trans  &trans  &trans
&kp NUMBER_0  &kp N1  &kp N2  &kp N3  &kp MINUS  &kp FSLH           &trans  &trans  &trans  &trans  &trans  &trans
                              &trans  &trans     &lt 1 SPACE        &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        system {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};

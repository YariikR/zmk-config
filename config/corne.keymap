/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Caps_Word {
            bindings = <&caps_word>;
            key-positions = <24 35>;
        };

        Numbed {
            bindings = <&to 4>;
            key-positions = <12 13>;
        };

        Caps_Lock {
            bindings = <&kp CLCK>;
            key-positions = <12 23>;
        };

        BT1 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <4 5>;
        };

        BT2 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <16 17>;
        };

        BT3 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <28 29>;
        };
    };

    behaviors {
    };

    macros {
        copy_line: copy_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LG(LEFT_ARROW) &kp LG(LS(RIGHT)) &kp LG(C) &kp LEFT_ARROW>;
            label = "COPY_LINE";
        };

        find_word: find_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(LEFT_ARROW) &kp RS(RA(RIGHT)) &kp LG(C) &kp LG(F)>;
            label = "FIND_WORD";
        };

        bottom_line: bottom_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(RIGHT) &kp RS(ENTER)>;
            label = "BOTTOM_LINE";
        };

        top_line: top_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(LEFT) &kp RS(ENTER) &kp UP_ARROW>;
            label = "TOP_LINE";
        };

        delete_line: delete_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(LEFT_ARROW) &kp RC(K)>;
            label = "DELETE_LINE";
        };

        delete_to_left: delete_to_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(RG(LEFT_ARROW)) &kp BACKSPACE>;
            label = "DELETE_TO_LEFT";
        };

        delete_full_line: delete_full_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(LEFT_ARROW) &kp RC(K) &kp BACKSPACE>;
            label = "DELETE_FULL_LINE";
        };

        select_all_copy: select_all_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(A) &kp LG(C) &kp RIGHT>;
            label = "SELECT_ALL_COPY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt LA(LC(RIGHT_GUI)) TAB        &kp Q  &kp W  &kp E                   &kp R               &kp T          &kp Y        &kp U                        &kp I          &kp O    &kp P     &lt 2 LEFT_BRACKET
&mt LA(LC(LG(RIGHT_SHIFT))) ESC  &kp A  &kp S  &kp D                   &kp F               &kp G          &kp H        &kp J                        &kp K          &kp L    &kp SEMI  &mt RIGHT_CONTROL SQT
&kp LEFT_SHIFT                   &kp Z  &kp X  &kp C                   &kp V               &kp B          &kp N        &kp M                        &kp COMMA      &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                               &mt LEFT_ALT BACKSPACE  &mt LEFT_GUI ENTER  &lt 6 SPACE    &lt 1 ENTER  &mt RIGHT_COMMAND BACKSPACE  &kp RIGHT_ALT
            >;
        };

        Symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp EXCL  &kp AT      &kp HASH  &kp DLLR    &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &trans
&kp TILDE  &kp LBKT  &kp RBKT    &trans    &find_word  &trans       &kp PLUS   &kp MINUS  &kp LBKT         &kp LBRC  &kp RBRC  &kp RBKT
&trans     &trans    &kp DELETE  &trans    &trans      &trans       &kp EQUAL  &kp UNDER  &trans           &trans    &kp BSLH  &kp PIPE
                                 &trans    &trans      &trans       &trans     &trans     &trans
            >;
        };

        BT {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        System {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5     &trans          &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans      &trans  &kp C_POWER
&trans  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10    &kp C_PREVIOUS  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp C_NEXT  &trans  &kp C_SLEEP
&trans  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15    &trans          &kp K_MUTE            &kp C_PP              &trans      &trans  &kp C_AC_HOME
                          &trans   &trans   &trans     &trans          &trans                &trans
            >;
        };

        Numpad {
            bindings = <
&kp COMMA   &kp NUMBER_1  &kp NUMBER_2     &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &trans  &trans  &trans  &trans  &trans  &trans
&to 0       &kp NUMBER_6  &kp NUMBER_7     &kp N8        &kp NUMBER_9  &kp NUMBER_0    &trans  &trans  &trans  &trans  &trans  &trans
&kp PERIOD  &kp PLUS      &kp KP_MULTIPLY  &kp EQUAL     &kp MINUS     &kp FSLH        &trans  &trans  &trans  &trans  &trans  &trans
                                           &trans        &trans        &lt 6 SPACE     &trans  &trans  &trans
            >;
        };

        Right_Side {
            bindings = <
&trans  &kp Y  &kp U  &kp I   &kp O   &kp P          &trans  &trans  &trans  &trans  &trans  &trans
&to 0   &kp H  &kp J  &kp K   &kp L   &trans         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N  &kp M  &trans  &trans  &trans         &trans  &trans  &trans  &trans  &trans  &trans
                      &trans  &trans  &lt 6 SPACE    &trans  &trans  &trans
            >;
        };

        Numb_Arr {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LG(GRAVE)    &kp N1         &kp N2          &kp N3        &kp N4          &kp N5       &kp N6           &kp N7        &kp N8     &kp N9     &kp N0        &trans
&kp LS(LC(TAB))  &kp LC(TAB)    &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT    &kp LEFT         &kp DOWN      &kp UP     &kp RIGHT  &delete_line  &delete_full_line
&to 5            &kp LC(SPACE)  &kp HOME        &kp PAGE_UP   &kp PAGE_DOWN   &kp END      &delete_to_left  &bottom_line  &top_line  &kp RC(K)  &copy_line    &select_all_copy
                                                &trans        &trans          &trans       &trans           &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        system {
            if-layers = <6 1>;
            then-layer = <3>;
        };
    };
};

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <1>; };

/ {
    combos {
        compatible = "zmk,combos";

        Caps_Word {
            bindings = <&caps_word>;
            key-positions = <24 35>;
        };

        Caps_Lock {
            bindings = <&kp CLCK>;
            key-positions = <12 23>;
        };

        num_toggle {
            bindings = <&to_num_lay>;
            key-positions = <16 17>;
        };

        right_side_toggle {
            bindings = <&to_right_side>;
            key-positions = <5 4>;
        };

        cmd_backspace {
            bindings = <&kp LG(BACKSPACE)>;
            key-positions = <28 29>;
        };
    };

    macros {
        copy_line: copy_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LG(LEFT_ARROW) &kp LG(LS(RIGHT)) &kp LG(C) &kp LEFT_ARROW>;
            label = "COPY_LINE";
        };

        find_word: find_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(LEFT_ARROW) &kp RS(RA(RIGHT)) &kp LG(C) &kp LG(F)>;
            label = "FIND_WORD";
        };

        bottom_line: bottom_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(RIGHT) &kp RS(ENTER)>;
            label = "BOTTOM_LINE";
        };

        top_line: top_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(LEFT) &kp RS(ENTER) &kp UP_ARROW>;
            label = "TOP_LINE";
        };

        delete_line: delete_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(LEFT_ARROW) &kp RC(K)>;
            label = "DELETE_LINE";
        };

        delete_to_left: delete_to_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(RG(LEFT_ARROW)) &kp BACKSPACE>;
            label = "DELETE_TO_LEFT";
        };

        delete_full_line: delete_full_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(LEFT_ARROW) &kp RC(K) &kp BACKSPACE>;
            label = "DELETE_FULL_LINE";
        };

        to_num_lay: to_num {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 1 &rgb_ug RGB_COLOR_HSB(109,100,50) &rgb_ug RGB_TOG>;
            label = "TO_NUM";
        };

        to_right_side: to_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 2 &rgb_ug RGB_COLOR_HSB(42,100,50) &rgb_ug RGB_TOG>;
            label = "TO_RIGHT";
        };

        delete_to_right: delete_to_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(RIGHT)) &kp BACKSPACE>;
            label = "DELETE_TO_RIGHT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt LA(LC(RIGHT_GUI)) TAB              &kp Q  &kp W  &kp E             &kp R               &kp T          &kp Y        &kp U                        &kp I          &kp O    &kp P     &kp LEFT_BRACKET
&mt LA(LC(LG(RIGHT_SHIFT))) LA(SPACE)  &kp A  &kp S  &kp D             &kp F               &kp G          &kp H        &kp J                        &kp K          &kp L    &kp SEMI  &mt RIGHT_CONTROL SQT
&kp LEFT_SHIFT                         &kp Z  &kp X  &kp C             &kp V               &kp B          &kp N        &kp M                        &kp COMMA      &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                                     &mt LEFT_ALT ESC  &mt LEFT_GUI ENTER  &lt 3 SPACE    &lt 1 ENTER  &mt RIGHT_COMMAND BACKSPACE  &kp RIGHT_ALT
            >;
        };

        Numpad {
            bindings = <
&kp COMMA   &kp NUMBER_1  &kp NUMBER_2     &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp GRAVE       &kp TILDE       &trans        &trans           &trans            &kp RIGHT_BRACKET
&kp PERIOD  &kp NUMBER_6  &kp NUMBER_7     &kp N8        &kp NUMBER_9  &kp NUMBER_0    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp RS(NUMBER_6)  &trans
&kp PRCNT   &kp PLUS      &kp KP_MULTIPLY  &kp EQUAL     &kp MINUS     &kp FSLH        &trans          &trans          &kp FSLH      &kp RS(FSLH)     &kp RS(N7)        &trans
                                           &trans        &trans        &lt 3 SPACE     &trans          &trans          &trans
            >;
        };

        Right_Side {
            bindings = <
&trans  &kp Y  &kp U  &kp I   &kp O   &kp P     &none  &none  &none  &none  &none  &none
&trans  &kp H  &kp J  &kp K   &kp L   &none     &none  &none  &none  &none  &none  &none
&trans  &kp N  &kp M  &none   &none   &none     &none  &none  &none  &none  &none  &none
                      &trans  &trans  &trans    &none  &none  &none
            >;
        };

        Second {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LG(GRAVE)    &delete_full_line  &delete_line     &top_line      &bottom_line    &copy_line          &kp EXCL  &kp HASH   &kp DLLR      &kp LPAR   &kp RPAR  &kp RBKT
&kp LS(LC(TAB))  &kp LC(TAB)        &kp LEFT_ARROW   &kp UP_ARROW   &kp DOWN_ARROW  &kp RIGHT           &kp LEFT  &kp DOWN   &kp UP_ARROW  &kp RIGHT  &kp AT    &kp AMPERSAND
&kp LEFT_SHIFT   &kp LC(SPACE)      &delete_to_left  &kp BACKSPACE  &kp DELETE      &delete_to_right    &kp LBRC  &kp UNDER  &kp CARET     &kp RBRC   &kp BSLH  &kp PIPE
                                                     &trans         &trans          &trans              &trans    &trans     &trans
            >;
        };

        System {
            bindings = <
&bt BT_SEL 2  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5     &trans          &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans      &rgb_ug RGB_TOG  &rgb_ug RGB_COLOR_HSB(0,100,50)
&bt BT_SEL 1  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10    &kp C_PREVIOUS  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp C_NEXT  &rgb_ug RGB_BRI  &rgb_ug RGB_HUI
&bt BT_SEL 0  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15    &trans          &kp K_MUTE            &kp C_PP              &trans      &rgb_ug RGB_BRD  &rgb_ug RGB_HUD
                                &trans   &trans   &trans     &trans          &trans                &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        system {
            if-layers = <3 1>;
            then-layer = <4>;
        };
    };
};
